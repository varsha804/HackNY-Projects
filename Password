#include <stdio.h>
#include <stdlib.h>
#include "cracker1.h"
#include "format.h"
#include "utils.h"
#include <string.h>
#include <stdio.h>
#include "queue.h"
#include <crypt.h>

queue *q;
int work;
int numRecovered;
int numFailed;

typedef struct {
	char * username; // 1-8 chars
	char * hash; // 13 chars
	char * password;
	int num_hidden; // 1-8 chars
	int tid;
	int work;
} password;


char **strsplit(const char *str, const char *delim, size_t *numtokens) {
  // copy the original string so that we don't overwrite parts of it
  char *s = strdup(str);
  
  // implement a dynamically-growing array
  size_t tokens_alloc = 1;
  size_t tokens_used = 0;
  char **tokens = calloc(tokens_alloc, sizeof(char *));
  char *token, *strtok_ctx;
  for (token = strtok_r(s, delim, &strtok_ctx); token != NULL;
       token = strtok_r(NULL, delim, &strtok_ctx)) {
    // check if we need to allocate more space for tokens
    if (tokens_used == tokens_alloc) {
      tokens_alloc *= 2;
      tokens = realloc(tokens, tokens_alloc * sizeof(char *));
    }
    tokens[tokens_used++] = strdup(token);
  }
  // cleanup
  if (tokens_used == 0) {
    free(tokens);
    tokens = NULL;
  } else {
    tokens = realloc(tokens, tokens_used * sizeof(char *));
  }
  *numtokens = tokens_used;
  free(s);
  // Adding a null terminator
  tokens = realloc(tokens, sizeof(char *) * (tokens_used + 1));
  tokens[tokens_used] = NULL;
  return tokens;
}

void *start_routine(void *q) {
	int j;
	for (j = 0; j < work; j++) {
		password *p = calloc(sizeof(password), 1);
		p = queue_pull(q);
		if (p == NULL)
      break;
		if (j == 0)
			v1_print_thread_start(p->tid, p->username);

    int num_shown = getPrefixLength(p->password);
		memset(p->password+num_shown, 'a', p->num_hidden);
    
		int found = 0;
		int works = 1;
		int hashCount = 1;
		struct crypt_data cdata;
		cdata.initialized = 0;
    
    // do the following until the password has been cracked
		while (!found) {
			char *hidden = calloc(p->num_hidden, 1);
			strncpy(hidden, p->password+num_shown, p->num_hidden); 
			hidden[p->num_hidden] = '\0';

      // check if the the hidden part can be incremented any further
			works = incrementString(hidden);
			p->password[num_shown] = '\0';
			strcat(p->password, hidden);
			hashCount++;
			if (!works)
				break;
			char * encrypted = crypt_r(p->password, "xx", &cdata);	
			if (encrypted) {	
				if (strcmp(encrypted, p->hash) == 0) {
					found = 1;
					numRecovered++;
				}
			}
			free(hidden); hidden = NULL;
		}			
		if (!found) {
			numFailed++;	
			hashCount--;
		}	
		double time = getThreadCPUTime();
		v1_print_thread_result(p->tid, p->username, p->password, hashCount, time, !found);
		free(p->password); p->password = NULL;
		free(p->hash); p->hash = NULL;
		free(p->username); p->username = NULL;
		free(p);
		p = NULL;
	}
	return NULL;
}

int start(size_t thread_count) {
	size_t i;
	q = queue_create(-1, NULL, NULL);
	FILE *fp = stdin;	
	char * line = NULL;
	size_t len = 0;
	ssize_t read;
	password *p = NULL;
	size_t *num_tok = malloc(sizeof(int*));
	
  // get all of the passwords which need to be cracked
	size_t num_lines = 0;
	pthread_t threads[thread_count];
	while ((read = getline(&line, &len, fp)) > 0) {
		num_lines++;
		p = calloc(sizeof(password), 1);
		char **array = strsplit(line, " ", num_tok);	
		p->username = strdup(array[0]);
		p->hash = strdup(array[1]);
		p->password = strdup(array[2]);
		p->num_hidden = 0;
		p->num_hidden = (strlen(p->password) - getPrefixLength(p->password) - 1);
		p->tid = num_lines;
		queue_push(q, p);
	}
	if (thread_count > num_lines)
		thread_count = num_lines;
	int leftover = num_lines % thread_count;
	work = num_lines/thread_count;
	int j = 0;
	for (i = 0; i < thread_count; ++i) {
		queue *mini = queue_create(-1, NULL, NULL);
		if (i == thread_count - 1)
			work = work + leftover;
		for (j = 0; j < work; j++) {
			p = queue_pull(q);
			queue_push(mini, p);
		}
		queue_push(mini, NULL);	
		pthread_create(threads+i, NULL, start_routine, mini);
	}
	for (i = 0; i < thread_count; ++i) {
		pthread_join(threads[i], NULL);
	}
	v1_print_summary(numRecovered, numFailed);
	return 0;
}
